on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.ref }}
  # cancel previous runs on the same PR
  cancel-in-progress: true

name: PR Tests

env:
  CI: true
  NODE_VERSION: 16

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    timeout-minutes: 30
    outputs:
      projects: ${{ steps.get-project-changes.outputs.projects }}
      apps-step-1: ${{ steps.compute-deploy-steps.outputs.apps-step-1 }}
      apps-step-2: ${{ steps.compute-deploy-steps.outputs.apps-step-2 }}
      apps-step-3: ${{ steps.compute-deploy-steps.outputs.apps-step-3 }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # We need to fetch all branches and commits so that Nx affected has a base to compare against.

      - name: Install Node.js dependencies
        uses: ./.github/actions/install-node-deps

      - name: Package project
        uses: ./.github/actions/package

      - name: Get project changes
        id: get-project-changes
        uses: ./.github/actions/get-project-changes
        with:
          base-branch: ${{ github.base_ref }}

      - name: Compute deploy steps
        id: compute-deploy-steps
        uses: ./.github/actions/compute-deploy-steps
        with:
          projects: ${{ steps.get-project-changes.outputs.projects }}

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[ci skip]')
      && join(fromJson(needs.build.outputs.projects)) != ''
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.build.outputs.projects) }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Run tests
        uses: ./.github/actions/lint-and-tests
        with:
          project: ${{ matrix.project }}

      - id: get-project-path
        run: echo "::set-output name=path::$(jq -r '.projects[${{ toJson(matrix.project) }}]' workspace.json)"
        shell: bash

      # - name: Check if SonarCloud Scan should run (only run on 'main')
      #   id: check_sonarcloud_scan_should_run
      #   uses: andstor/file-existence-action@v1
      #   with:
      #     files: '${{ steps.get-project-path.outputs.path }}/sonar-project.properties'

      # - name: SonarCloud Scan
      #   if: steps.check_sonarcloud_scan_should_run.outputs.files_exists == 'true' && github.base_ref == 'main'
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     projectBaseDir: ${{ steps.get-project-path.outputs.path }}

  validate-pr:
    name: Validate the PR
    runs-on: ubuntu-latest
    if: always()
    needs: test
    steps:
      - name: Validate tests
        run: |
          if [[ ${{ needs.test.result }} = "failure" ]]; then
            echo "App tests failed"
            exit 1
          fi
        shell: bash
