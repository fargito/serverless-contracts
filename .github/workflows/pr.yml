on:
  pull_request:
    types: [opened, synchronize, reopened]

# cancel previous runs on the same PR
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

name: ⛷ PR tests

env:
  CI: true
  NODE_VERSION: 16

defaults:
  run:
    shell: bash

jobs:
  build-lint:
    name: 🚀 Build and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v3
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: '🧪 Test linter'
        run: pnpm nx affected --targets=test-linter,test-type,test-circular --parallel=2

  build:
    name: 🏗 Build Project
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      projects: ${{ steps.get-project-changes.outputs.projects }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: Get project changes
        id: get-project-changes
        uses: ./.github/actions/get-project-changes

  unit-tests-and-sonar:
    name: 🏛 ${{ matrix.project }} - Unit Tests and Sonar
    needs: build
    runs-on: ubuntu-latest
    if: join(fromJson(needs.build.outputs.projects)) != ''
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.build.outputs.projects) }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - name: Run unit tests and sonar
        uses: ./.github/actions/unit-tests-and-sonar
        with:
          project: ${{ matrix.project }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}

  validate-pr:
    name: ✅ Validate the PR
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [build-lint, build, unit-tests-and-sonar]
    steps:
      - name: Validate build-lint
        run: |
          if [[ ${{ needs.build-lint.result }} = "failure" ]]; then
            echo "build-lint failed"
            exit 1
          fi
      - name: Validate build
        run: |
          if [[ ${{ needs.build.result }} = "failure" ]]; then
            echo "build failed"
            exit 1
          fi
      - name: Validate unit tests and sonar
        run: |
          if [[ ${{ needs.unit-tests-and-sonar.result }} = "failure" ]]; then
            echo "App tests failed"
            exit 1
          fi
