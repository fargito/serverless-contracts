on:
  push:
    branches:
      - main

name: 🚀 Deploy production
concurrency: push_main

permissions: write-all

env:
  CI: true
  TARGET_SHA: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}

jobs:
  build-lint:
    name: 🚀 Build and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_SHA }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v3
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: '🧪 Test linter'
        run: pnpm nx affected --targets=test-linter,test-type,test-circular --parallel=2

  build:
    name: 🏗 Build Project
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      projects: ${{ steps.get-project-changes.outputs.projects }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_SHA }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: Get project changes
        id: get-project-changes
        uses: ./.github/actions/get-project-changes

  unit-tests-and-sonar:
    name: 🏛 ${{ matrix.project }} - App Unit Tests and Sonar
    needs: build
    runs-on: ubuntu-latest
    if: join(fromJson(needs.build.outputs.projects)) != ''
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.build.outputs.projects) }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_SHA }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - name: Run unit tests and sonar
        uses: ./.github/actions/unit-tests-and-sonar
        with:
          project: ${{ matrix.project }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}

  validate-tests:
    name: ✅ Validate that tests have passed
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [build-lint, build, unit-tests-and-sonar]
    steps:
      - name: Validate build-lint
        run: |
          if [[ ${{ needs.build-lint.result }} = "failure" ]]; then
            echo "build-lint failed"
            exit 1
          fi
      - name: Validate build
        run: |
          if [[ ${{ needs.build.result }} = "failure" ]]; then
            echo "build failed"
            exit 1
          fi
      - name: Validate unit tests and sonar
        run: |
          if [[ ${{ needs.unit-tests-and-sonar.result }} = "failure" ]]; then
            echo "App tests failed"
            exit 1
          fi

  deploy:
    name: Deploy production
    needs: validate-tests
    if: ${{ always() && needs.validate-tests.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_SHA }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v3
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: Configure AWS credentials with assume role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: eu-west-1
      - name: Deploy production
        # nx run-many is used here, because it will not throw an error if our target action isn't found in the project, which is exactly what we want!
        run: pnpm nx run-many --target=deploy-production --parallel=2
